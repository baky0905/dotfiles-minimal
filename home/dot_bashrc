#!/usr/bin/env bash
# shellcheck shell=bash
# shellcheck disable=SC2312

# This file is based on Ubuntu's default .bashrc, with some customizations

# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples
# put this at the top of your ~/.bashrc to inherit the goodness here (assuming you've checked out this repo to ~/github/bash-tools):
#
#   if [ -f ~/github/bash-tools/.bashrc ]; then
#       . ~/github/bash-tools/.bashrc
#   fi
#
# ============================================================================ #

# Use with PS4 further down + profile-bash.pl (still in private repos) for performance profiling this bashrc
#set -x

# If not running interactively, don't do anything:
[[ -z "${PS1:-}" ]] && return

[[ -n "${PERLBREW_PERL:-}" ]] && return

# Another variation
#if [[ $- != *i* ]] ; then
#    # Shell is non-interactive.  Be done now!
#    return
#fi

# ============================================================================ #

# after cleanshell, not even $HOME is set, this messes up things that base off $HOME, like SDKman
if [[ -z "${HOME:-}" ]]; then
    export HOME=~
fi

bash_tools="${HOME}/.dotfiles/home"

# shellcheck disable=SC1090
. "${bash_tools}/.bash.d/os_detection.sh"

# enable color support for ls
if [[ "${TERM}" != "dumb" ]] &&
    ! is_mac; then
    eval "$(dircolors -b)"
fi

# shut up Mac, Bash still rocks
export BASH_SILENCE_DEPRECATION_WARNING=1

# ============================================================================ #

# technically should get called only for new login shells
#[ -f /etc/profile     ] && . /etc/profile
[[ -f /etc/bash/bashrc ]] && . /etc/bash/bashrc
[[ -f /etc/bashrc ]] && . /etc/bashrc

[[ -f /etc/bash_completion ]] && . /etc/bash_completion

[[ -x /usr/bin/lesspipe ]] && eval "$(SHELL=/bin/sh lesspipe)"

# shellcheck disable=SC1090
[[ -f "${HOME}/.aliases" ]] && source "${HOME}/.aliases"

# ============================================================================ #

# SECURITY TO STOP STUFF BEING WRITTEN TO DISK
#unset HISTFILE
#unset HISTFILESIZE
export HISTSIZE=50000
export HISTFILESIZE=50000

rmhist() { history -d "$1"; }
histrm() { rmhist "$1"; }
histrmlast() { history -d "$(history | tail -n 2 | head -n 1 | awk '{print $1}')"; }

# This adds a time format of "YYYY-mm-dd hh:mm:ss  command" to the bash history
export HISTTIMEFORMAT="%F %T  "

# stop logging duplicate successive commands to history
HISTCONTROL=ignoredups:ignorespace

# Neat trick "[ \t]*" to exclude any command by just prefixing it with a space. Fast way of going stealth for pw entering on cli
# & here means any duplicate patterns, others are simple things like built-ins and ls and stuff you don't need history for
#export HISTIGNORE="[ \t]*:&:ls:[bf]g:exit"

# append rather than overwrite history
shopt -s histappend

# check window size and update $LINES and $COLUMNS after each command
shopt -s checkwinsize

shopt -s cdspell

# prevent core dumps which can leak sensitive information
ulimit -c 0

# tighten permissions except for root where library installations become inaccessible to my user account
if [[ "${EUID}" = 0 ]]; then
    umask 0022
else
    # caused no end of problems when doing sudo command which retained 0077 and broke library access for user accounts
    #umask 0077
    umask 0022
fi

# make less more friendly for non-text input files, see lesspipe(1)
[[ -x /usr/bin/lesspipe ]] && eval "$(SHELL=/bin/sh lesspipe)"

# ============================================================================ #

sudo=sudo
if [[ "${EUID}" -eq 0 ]]; then
    # used throughout .bash.d/*.sh
    # shellcheck disable=SC2034
    sudo=""
fi

# shellcheck disable=SC1090
type add_PATH &>/dev/null || . "${bash_tools}/.bash.d/paths.sh"

# ============================================================================ #

# want this to fail is there is no match because we should always have local .bash.d/*.sh in this repo
# shopt -s nullglob
for src in "${bash_tools}/.bash.d/"*.sh; do
    # shellcheck disable=SC1090
    . "${src}"
done
# shopt -u nullglob

# added by travis gem - should be in ~/.bashrc so not needed to duplicate here
#[ -f /Users/hari.sekhon/.travis/travis.sh ] && source /Users/hari.sekhon/.travis/travis.sh

# shellcheck disable=SC1090
[[ -f "${HOME}/.bashrc.local" ]] && . "${HOME}/.bashrc.local"
if [[ -d "${HOME}/.bash.d" ]]; then
    shopt -s nullglob
    for src in "${HOME}/.bash.d/"*.sh; do
        # shellcheck disable=SC1090
        . "${src}"
    done
    shopt -u nullglob
fi
if [[ -d "${HOME}/.bash.autocomplete.d" ]]; then
    shopt -s nullglob
    for src in "${HOME}/.bash.autocomplete.d/"*.sh; do
        # shellcheck disable=SC1090
        . "${src}"
    done
    shopt -u nullglob
fi

##############################################################################################################################################################

# if not coming from .bash_profile and .bash_profile exists
if [[ -z "${COMING_FROM_BASH_PROFILE}" && -f "${HOME}/.bash_profile" ]]; then
    export COMING_FROM_BASHRC=true
    # shellcheck source=./dot_profile.tmpl
    source "${HOME}/.bash_profile"
    unset COMING_FROM_BASHRC
fi

# If not running interactively, don't do anything
case $- in
*i*) ;;
*) return ;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[[ -x /usr/bin/lesspipe ]] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [[ -z "${debian_chroot:-}" ]] && [[ -r /etc/debian_chroot ]]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "${TERM}" in
xterm-color | *-256color) color_prompt=yes ;;
*) ;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [[ -n "${force_color_prompt}" ]]; then
    if [[ -x /usr/bin/tput ]] && tput setaf 1 >&/dev/null; then
        # We have color support; assume it's compliant with Ecma-48
        # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
        # a case would tend to support setf rather than setaf.)
        color_prompt=yes
    else
        color_prompt=
    fi
fi

if [[ "${color_prompt}" = yes ]]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "${TERM}" in
xterm* | rxvt*)
    PS1="\[\e]0;${debian_chroot:+(${debian_chroot})}\u@\h: \w\a\]${PS1}"
    ;;
*) ;;
esac

# enable color support of ls and also add handy aliases
if [[ -x /usr/bin/dircolors ]]; then
    if [[ -r ~/.dircolors ]]; then
        eval "$(dircolors -b ~/.dircolors)"
    else
        eval "$(dircolors -b)"
    fi
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [[ -f ~/.bash_aliases ]]; then
    # shellcheck source=./dot_bash_aliases.tmpl
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
    if [[ -f /usr/share/bash-completion/bash_completion ]]; then
        . /usr/share/bash-completion/bash_completion
    elif [[ -f /etc/bash_completion ]]; then
        . /etc/bash_completion
    fi
fi

# Use the "powerline-multiline" theme
#LC_ALL=en_US.UTF-8
export BASH_IT_THEME="powerline-multiline"
